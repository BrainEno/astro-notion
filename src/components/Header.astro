---
import HeaderLink from './HeaderLink.astro'
import SearchButton from './SearchButton.astro'
import { Icon } from 'astro-icon/components'

interface Props {
  siteTitle: string
  customIconURL: string
}

const links = [
  { title: 'Home', href: '/' },
  { title: 'All', href: '/posts' },
  { title: 'Novel', href: '/posts/tag/novel' },
  { title: 'Poems', href: '/posts/tag/poem' },
  { title: 'Else', href: '/posts/tag/else' },
]

const { customIconURL, siteTitle } = Astro.props
---

<header class="header">
  <a href="/" class="icon">
    {customIconURL && <img src={customIconURL} alt="icon" />}
    <span class="icon-text">{siteTitle}</span>
  </a>
  <ul class="header-links">
    {links.map((link) => <HeaderLink title={link.title} href={link.href} />)}
  </ul>
  <div class="icons">
    <div class="search">
      <SearchButton />
    </div>
    <div class="menu">
      <button class="menu-button"><Icon name="hugeicons:menu-11" /></button>
    </div>
  </div>
</header>
<style>
  .header {
    height: 65px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 12px 40px;
    position: fixed;
    top: 0;
    z-index: 100;
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 500ms;
    color: var(--bg);
    background: linear-gradient(
      to bottom,
      white,
      rgba(255, 255, 255, 0.95),
      rgba(255, 255, 255, 0.85)
    );
    border-bottom: 1px solid rgba(18, 18, 19, 0.144);
  }

  .header > .icon {
    display: flex;
    align-items: center;
    justify-content: space-between;
    cursor: pointer;
    min-width: 180px;
  }

  .header > .icon .icon-text {
    text-transform: uppercase;
    font-size: 20px;
    margin-left: 8px;
    font-weight: 600;
    color: black;
  }

  .header > .icon img {
    width: 40px;
    height: 40px;
  }

  .header .header-links {
    flex: 1;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
  }

  .header .search {
    width: 200px;
    display: flex;
    flex-direction: row;
    justify-content: flex-end;
    align-items: flex-end;
  }

  .header .menu {
    display: none;
  }

  .header .menu-button svg {
    width: 20px;
    height: 20px;
  }

  @media screen and (max-width: 700px) {
    .header {
      width: 100vw;
      justify-content: space-between;
      padding: 0px 15px;
    }

    .header > .icon {
      width: max-content;
    }
    .header > .icon > .icon-text {
      display: none;
    }

    .header .header-links {
      display: none;
    }

    .header .menu {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .header .menu .menu-button {
      color: black;
      border: none;
      background-color: transparent;
    }

    .header .icons {
      width: max-content;
      display: flex;
      flex-direction: row;
      align-items: center;
    }

    .header .search {
      width: 50px;
    }

    .header .header-links {
      padding-top: 50px;
      height: 100vh;
      width: 40vw;
      position: absolute;
      flex-direction: column;
      justify-content: flex-start;
      align-items: flex-start;
      top: 50px;
      background-color: white;
      border-right: 1px solid rgba(18, 18, 19, 0.144);
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    function toggleMenu() {
      if (screen.width > 700) return
      const menu = document.querySelector('.header-links') as HTMLDivElement
      if (menu.style.display === 'none') {
        menu.style.display = 'flex'
      } else {
        menu.style.display = 'none'
      }
    }

    const menuBtn = document.querySelector('.menu-button') as HTMLButtonElement

    menuBtn.addEventListener('click', toggleMenu)
  })
</script>
